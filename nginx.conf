user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log debug;
pid /var/run/nginx.pid;

load_module modules/ngx_http_js_module.so;
load_module modules/ngx_http_opentracing_module.so;
load_module modules/ngx_http_headers_more_filter_module.so;
load_module modules/ngx_http_app_protect_module.so;

events {
    worker_connections 1024;
}

http {
    default_type application/octet-stream;
    #Consider Removing as its already defined in apigateway
    sendfile on;
    #tcp_nopush     on;

    keepalive_timeout 65;

    #include /etc/nginx/apigateway/server.conf; # All API gateway configuration

    map_hash_bucket_size 128;
    # [Loading all the upstream config]
    #include /etc/nginx/upstreams/*.conf;
    upstream f1_api {
        zone f1_service 64k;
        keepalive 75;
        server 10.20.0.7:3000;
        server 10.20.0.9:3000;
        server 10.20.0.11:3000;
    }

    upstream hello_nginx_api {
        zone hello_nginx_service 64k;
        keepalive 75;
        server 10.20.0.12:3000;
        server 10.20.0.8:3000;
        server 10.20.0.6:3000;
    }

    upstream weather_api {
        zone weather_service 64k;
        keepalive 75;
        server 10.20.0.5:3000;
        server 10.20.0.10:3000;
        server 10.20.0.13:3000;
    }
    
    #include /etc/nginx/policies/ratelimit/*.conf;
    limit_req_zone $customer_id zone=f1_api_customer_zone:10m rate=3r/m;
    limit_req_zone $customer_id zone=hello_nginx_customer_zone:10m rate=3r/m;
    limit_req_zone $customer_id zone=weather_customer_zone:10m rate=3r/m;
    
    #include /etc/nginx/policies/jwt_claims_filter/*.conf;
    auth_jwt_claim_set $f1_api_role permissions;
    auth_jwt_claim_set $f1_api_aud aud;
    map $f1_api_role $isAdmin {
        "admin" 1;
        default 0;
    }

    # Verify the aud claim whether the token is issued to the client for differnt resource access.
    map $f1_api_aud $isClientAllowedAudience {
        "https://rajeshbavan.ddns.net/v1/partner" 1;
        default 0;
    }

    auth_jwt_claim_set $hello_nginx_aud aud;
    # Verify the aud claim whether the token is issued to the client for differnt resource access.
    map $hello_nginx_aud $isClientAllowedAudience {
        "https://rajeshbavan.ddns.net/v1/partner" 1;
        default 0;
    }

    auth_jwt_claim_set $weather_aud aud;
    auth_jwt_claim_set $weather_role permissions;
    map $weather_role $isAdmin {
        "admin" 1;
        default 0;
    }

    # Verify the aud claim whether the token is issued to the client for differnt resource access.
    map $weather_aud $isClientAllowedAudience {
        "https://rajeshbavan.ddns.net/v1/partner" 1;
        default 0;
    }

    #include /etc/nginx/policies/global/authz/issuer.conf; # revisit
    resolver 8.8.8.8; # For DNS lookup of IdP endpoints;
    gunzip on; #Decompress IdP responses if necessary
    auth_jwt_claim_set $idp_issuer iss;
    auth_jwt_claim_set $customer_id sub;
    proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:1m max_size=10m;

    map $idp_issuer $isValidIssuer {
        "https://brajesh.au.auth0.com/" 1;
        default 0;
    }
    
    #include  /etc/nginx/policies/global/logs/format.conf;
    log_format api_main '$remote_addr - $remote_user [$time_local] "$request"'
                    ' $status $body_bytes_sent "$http_referer" "$http_user_agent"'
                    ' "$http_x_forwarded_for"';


    log_format api_json escape=json '{'
            '"current-time": "$time_local",'
            '"core": {'
            '"body_bytes_sent": "$body_bytes_sent",'
            '"remote-addr": "$remote_addr",'
            '"remote-user": "$remote_user",'
            '"realip-remote-addr": "$realip_remote_addr ",'
            '"request": "$request",'
            '"http": {'
                '"http-referer": "$http_referer",'
                '"http-user-agent": "$http_user_agent",'
                '"http-x-forwarded-for": "$http_x_forwarded_for"'
            '},'
            '"api": {'
                '"api-name" : "$api_name",'
                '"request-uri" : "$request_uri",'
                '"request-method" : "$request_method",'
                '"request-time" : "$request_time",'
                '"request-id" : "$request_id",'
                '"upstream-response-time" : "$upstream_response_time"'
            '}'
            '}'
        '}';

    server {
        set $api_name -; # Start with an undefined API name, each route should update this with appropriate value

        access_log /var/log/nginx/access.log api_json;

        # [Including config for server_name & ports to expose to consume this API Gateway]
        #include /etc/nginx/policies/global/routes/server_ports.conf;
        listen 80;
        
        server_name rajeshbavan.ddns.net;
        status_zone rajeshbavan.ddns.net;        

        # Return Not found for any api call without a context
        location = / {
            return 404;
        }

        app_protect_enable off;
        app_protect_policy_file "/etc/nginx/appprotect/waf-policy/f1-waf-policy.json";
        app_protect_security_log_enable on;
        app_protect_security_log "/etc/nginx/appprotect/log-policy/log_format_default.json" syslog:server=10.10.0.4:5144;
    
        # [OIDC JWT Authorization Policy configuration included at server(gateway) level to manage IDP's jwks uri effectively for the organisation]
        #include /etc/nginx/policies/global/authz/oidc_authz.conf;
#        auth_jwt "authz";
#        auth_jwt_key_request /_jwks_uri; # Keys will be fetched by subrequest

        error_log /var/log/nginx/host.jwt.error.log debug;

        if ( $idp_issuer = 0) {
#            return 403; # Forbidden
        }

        location = /_jwks_uri {
            internal;
            proxy_method GET;
            proxy_cache jwk; # Cache public key responses
            proxy_cache_valid 200 12h; # How long to consider keys "fresh"
            proxy_cache_use_stale error timeout updating; # Use old JWK Set if cannot reach IdP
            proxy_ssl_server_name on; # For SNI to the IdP
            proxy_set_header Content-Length ""; # ''
            proxy_ignore_headers Cache-Control Expires Set-Cookie; # Does not influence caching
            proxy_pass https://brajesh.au.auth0.com/.well-known/jwks.json; # OIDC JWKS uri to obtain public keys
        }

        # [Including global route policies]
        #include /etc/nginx/policies/global/routes/global_policy.conf;
        # directive in a nested block takes precedence over the same directive in the ancestors blocks. if the content is http, server and location directive
        client_max_body_size 16K; # Can be overridden in the location block as this part is included as part server block
        client_body_buffer_size 16k; #8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms.
        default_type application/json; # If no content-type then assume JSON
        #limit_req zone=ip_zone; # Hard rate limit is applied in the server level on the client ip address.


        # [Including global proxy header policies that get applied before routing to the upstream]
        #include /etc/nginx/policies/global/upstreams/global_policy.conf;
        # directive in a nested block takes precedence over the same directive in the ancestors blocks. if the content is http, server and location directive
        # Thee below directives enforces enterprise level policies, however this can be overridden by the location block
        proxy_connect_timeout 90;
        proxy_send_timeout 90;
        proxy_read_timeout 90;
        proxy_buffers 32 4k;
        proxy_intercept_errors on; # Do not send backend errors to the client

        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Accept-Encoding "";
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header x-correlation-id $request_id;

        # [ To include API routes which exposed as endpoint ]
        #include /etc/nginx/routes/*.conf;
        location /f1-api {
            set $api_name "f1-api";

            # HTTP Method level authorization
            limit_except GET { deny all;}
            error_page 403 = @405;

            set $upstream f1_api;
            rewrite ^ /_f1 last;
        }

        location = /_f1 {            
            internal;
            status_zone f1_uri_zone;

            # Ensure the user belongs to the Admin role
            if ( $isAdmin = 0 ) {
#                return 403; # Forbidden
            }
            # Ensure the token issued with appropriate audience claim to consume this service.
            if ( $isClientAllowedAudience = 0 ) {
#                return 403; # Forbidden
            }

            # Apply ratelimit on a customer id(sub claim)
 #           limit_req zone=f1_api_customer_zone;
 #           limit_req_status 429;
            
            error_log /var/log/nginx/error.log debug;
            proxy_pass http://$upstream$request_uri;
        }

        location /hello-nginxplus-api {
                set $api_name "hello-nginxplus";

                # HTTP Method level authorization
                limit_except GET {
                    deny all;
                }
                #error_page 403 = @405;

                set $upstream hello_nginx_api;
                rewrite ^ /_hello_nginx last;
            }

        location = /_hello_nginx {
            internal;
            status_zone hello_nginxplus_uri_zone;


            # Ensure the token issued with appropriate audience claim to consume this service.
            if ( $isClientAllowedAudience = 0 ) {
                return 403; # Forbidden
            }

            # Apply ratelimit on a customer id(sub claim)
            limit_req zone=hello_nginx_customer_zone;
            limit_req_status 429;

            proxy_pass http://$upstream$request_uri;
        }        

        location /weather {
            set $api_name "weather-api";

            # HTTP Method level authorization
            limit_except GET { deny all; }
            #error_page 403 = @405;

            set $upstream weather_api;
            rewrite ^ /_weather last;
        }

        # Policy section
        #
        location = /_weather {
            internal;
            status_zone weather_uri_zone;

            # Ensure the token issued with appropriate audience claim to consume this service.
            if ( $isAdmin = 0 ) {
                return 403; # Forbidden
            }
            if ( $isClientAllowedAudience = 0 ) {
                return 403; # Forbidden
            }

            # Apply ratelimit on a customer id(sub claim)
            limit_req zone=weather_customer_zone;
            limit_req_status 429;

            proxy_pass http://$upstream$request_uri;
        }

        # Accepted mime type for this api gateway.
        include /etc/nginx/apigateway/mime.types;

        # [ API client friendly JSON error responses ]
        include /etc/nginx/apigateway/default_errors.conf;

        # [Including global response policies that get applied before responding to the consumer]
        include /etc/nginx/apigateway/global_policy.conf;

        # Error responses
        error_page 404 = @400; # Invalid paths are treated as bad requests
    }

    # Enable api feature to configure nginx plus for configuration, monitoring and metrics.
    server {
        # Status page is enabled on port 8080:
        listen 8080;
        access_log off;

        location /api {
            # Enable CRUD for the admin api
            api write=on;
            # directives limiting access to the API
        }

        location = /dashboard.html {
            root /usr/share/nginx/html;
        }
        location /swagger-ui {
            root /usr/share/nginx/html;
        }
    }

    #include /etc/nginx/stubs/server.conf;    # For Testing, should be removed
    server {
        listen 8811;
        listen 8822;
        listen 8833;
        listen 8844;
        access_log off;
        location / {
            default_type application/json;
            expires -1;
            return 200 '{
                "data": [
                    {
                    "status": "200",
                    "server_address": "server_addr:$server_port",
                    "server_name":  "$hostname",
                    "date": "$time_local",
                    "uri": "$request_uri",
                    "request_id": "$request_id"
                    }
                ]
                }';
        }
        # Health check page
        location /health {
            default_type application/json;
            expires -1;
            return 200 '{
                "data": [
                    {
                    "status": "200",
                    "state": "healthy"
                    }
                ]
            }';
        }
    }
}
